// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sellers   Seller[]
  audits    Audit[]
}

model Seller {
  id           String    @id @default(cuid())
  userId       String
  cityId       String
  address      String?
  phone        String?
  workingHours String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  city         City      @relation(fields: [cityId], references: [id])
  products     Product[]
}

model City {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sellers   Seller[]
  products  Product[]
  orders    Order[]
}

model Fish {
  id        String    @id @default(cuid())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  weight      Int
  inStock     Boolean  @default(true)
  cityId      String
  sellerId    String
  fishId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  city        City     @relation(fields: [cityId], references: [id])
  seller      Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  fish        Fish?    @relation(fields: [fishId], references: [id])
  media       Media[]
  orderItems  OrderItem[]
}

model Media {
  id        String    @id @default(cuid())
  url       String
  type      MediaType
  productId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Audit {
  id          String      @id @default(cuid())
  action      AuditAction
  entityId    String
  entityType  EntityType
  description String
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
}

model Order {
  id          String   @id @default(cuid())
  name        String
  email       String
  phone       String
  comment     String?
  status      OrderStatus @default(PENDING)
  cityId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  city        City     @relation(fields: [cityId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum MediaType {
  IMAGE
  VIDEO
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}

enum EntityType {
  USER
  SELLER
  CITY
  FISH
  PRODUCT
  MEDIA
  ORDER
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
